/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
    }
}

description = 'Ballerina - Ballerina FTP Library'

def packageName = "ftp"
def packageOrg = "ballerina"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

apply plugin: 'io.ballerina.plugin'

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
}

configurations {
    externalJars
}

dependencies {
    externalJars(group: 'org.apache.commons', name: 'commons-vfs2', version: "${commonsVfsVersion}") {
        transitive = false
    }
    externalJars(group: 'com.jcraft', name: 'jsch', version: "${jcraftVersion}") {
        transitive = false
    }
    externalJars(group: 'commons-net', name: 'commons-net', version: "${commonsNetVersion}") {
        transitive = false
    }
    externalJars(group: 'org.mockftpserver', name: 'MockFtpServer', version: "${mockFtpServerVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.sshd', name: 'sshd-core', version: "${sshdCoreVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.ftpserver', name: 'ftpserver-core', version: "${ftpServerVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.ftpserver', name: 'ftplet-api', version: "${ftpletApiVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.mina', name: 'mina-core', version: "${minaCoreVersion}") {
        transitive = false
    }
    externalJars(group: 'aopalliance', name: 'aopalliance', version: "${aopallianceVersion}") {
        transitive = false
    }
    externalJars(group: 'org.slf4j', name: 'jcl-over-slf4j', version: "${jclSlf4jVersion}") {
        transitive = false
    }
    externalJars(group: 'org.testng', name: 'testng', version: "${testngVersion}") {
        transitive = false
    }
    externalJars(group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def stdlibDependentCommonsVfsVersion = project.commonsVfsVersion
        def stdlibDependentJschVersion = project.jschVersion
        def stdlibDependentCommonsNetVersion = project.commonsNetVersion
        def stdlibDependentTestngVersion = project.testngVersion
        def stdlibDependentMockFtpServerVersion = project.mockFtpServerVersion
        def stdlibDependentSshdCoreVersion = project.sshdCoreVersion
        def stdlibDependentFtpServerVersion = project.ftpServerVersion
        def stdlibDependentFtpletApiVersion = project.ftpletApiVersion
        def stdlibDependentMinaCoreVersion = project.minaCoreVersion
        def stdlibDependentAopallianceVersion = project.aopallianceVersion
        def stdlibDependentJclSlf4jVersion = project.jclSlf4jVersion

        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@commons.vfs2.version@", stdlibDependentCommonsVfsVersion)
        newConfig = newConfig.replace("@jsch.version@", stdlibDependentJschVersion)
        newConfig = newConfig.replace("@commons.net.version@", stdlibDependentCommonsNetVersion)
        newConfig = newConfig.replace("@testng.version@", stdlibDependentTestngVersion)
        newConfig = newConfig.replace("@mockftpserver.version@", stdlibDependentMockFtpServerVersion)
        newConfig = newConfig.replace("@sshd.core.version@", stdlibDependentSshdCoreVersion)
        newConfig = newConfig.replace("@ftpserver.core.version@", stdlibDependentFtpServerVersion)
        newConfig = newConfig.replace("@ftplet.api.version@", stdlibDependentFtpletApiVersion)
        newConfig = newConfig.replace("@mina.core.version@", stdlibDependentMinaCoreVersion)
        newConfig = newConfig.replace("@aopalliance.version@", stdlibDependentAopallianceVersion)
        newConfig = newConfig.replace("@jcl.slf4j.version@", stdlibDependentJclSlf4jVersion)

        ballerinaTomlFile.text = newConfig
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

task startKafkaServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=kafka-test"
                standardOutput = stdOut
            }
            if (!stdOut.toString().contains("kafka-test")) {
                println "Starting Kafka server."
                exec {
                    commandLine 'sh', '-c', "docker-compose -f tests/resources/docker/ftp-docker-compose.yaml up -d --build"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                sleep(10 * 1000)
            } else {
                println "Kafka server is already running."
            }
        }
    }
}

task stopKafkaServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=kafka-test"
                standardOutput = stdOut
            }
            if (stdOut.toString().contains("kafka-test")) {
                println "Stopping Kafka server."
                exec {
                    commandLine 'sh', '-c', "docker-compose -f tests/docker-compose.yaml rm -svf"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                sleep(5 * 1000)
            } else {
                println "Kafka server is not started."
            }
        }
    }
}

updateTomlFiles.dependsOn copyStdlibs

build.dependsOn "generatePomFileForMavenPublication"
build.dependsOn ":${packageName}-native:build"
build.dependsOn ":${packageName}-test-utils:build"
test.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-test-utils:build"
test.dependsOn startKafkaServer
build.finalizedBy stopKafkaServer

publishToMavenLocal.dependsOn build
publish.dependsOn build
