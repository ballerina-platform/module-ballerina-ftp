/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'com.github.psxpaul.execfork'
    id 'io.ballerina.plugin'
}

description = 'Ballerina - Ballerina FTP Library'

def packageName = "ftp"
def packageOrg = "ballerina"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def compilerPluginTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/CompilerPlugin.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaCompilerPluginFile = new File("$project.projectDir/CompilerPlugin.toml")
def testUtilExecutable = ""

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
}

configurations {
    externalJars
}

dependencies {
    externalJars(group: 'org.apache.commons', name: 'commons-vfs2', version: "${commonsVfsVersion}") {
        transitive = false
    }
    externalJars(group: 'com.jcraft', name: 'jsch', version: "${jschVersion}") {
        transitive = false
    }
    externalJars(group: 'commons-net', name: 'commons-net', version: "${commonsNetVersion}") {
        transitive = false
    }
    externalJars(group: 'org.slf4j', name: 'jcl-over-slf4j', version: "${jclSlf4jVersion}") {
        transitive = false
    }
    externalJars(group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.commons', name: 'commons-lang3', version: "${commonsLang3Version}") {
        transitive = false
    }
    externalJars(group: 'commons-io', name: 'commons-io', version: "${commonsIoVersion}") {
        transitive = false
    }

    externalJars(group: 'io.ballerina.lib', name: 'data.jsondata-native', version: "${stdlibDataJsonDataVersion}") {
        transitive = false
    }
    externalJars(group: 'io.ballerina.lib', name: 'data.xmldata-native', version: "${stdlibDataXmlDataVersion}") {
        transitive = false
    }
    externalJars(group: 'io.ballerina.lib', name: 'data.csv-native', version: "${stdlibDataCsvVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def stdlibDependentCommonsVfsVersion = project.commonsVfsVersion
        def stdlibDependentJschVersion = project.jschVersion
        def stdlibDependentCommonsNetVersion = project.commonsNetVersion
        def stdlibDependentMockFtpServerVersion = project.mockFtpServerVersion
        def stdlibDependentSshdCoreVersion = project.sshdCoreVersion
        def stdlibDependentFtpServerVersion = project.ftpServerVersion
        def stdlibDependentFtpletApiVersion = project.ftpletApiVersion
        def stdlibDependentMinaCoreVersion = project.minaCoreVersion
        def stdlibDependentAopallianceVersion = project.aopallianceVersion
        def stdlibDependentJclSlf4jVersion = project.jclSlf4jVersion
        def stdlibDependentCommonsIoVersion = project.commonsIoVersion
        def stdlibDependentCommonsLang3Version = project.commonsLang3Version

        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@commons.vfs2.version@", stdlibDependentCommonsVfsVersion)
        newConfig = newConfig.replace("@jsch.version@", stdlibDependentJschVersion)
        newConfig = newConfig.replace("@commons.net.version@", stdlibDependentCommonsNetVersion)
        newConfig = newConfig.replace("@mockftpserver.version@", stdlibDependentMockFtpServerVersion)
        newConfig = newConfig.replace("@sshd.core.version@", stdlibDependentSshdCoreVersion)
        newConfig = newConfig.replace("@ftpserver.core.version@", stdlibDependentFtpServerVersion)
        newConfig = newConfig.replace("@ftplet.api.version@", stdlibDependentFtpletApiVersion)
        newConfig = newConfig.replace("@mina.core.version@", stdlibDependentMinaCoreVersion)
        newConfig = newConfig.replace("@aopalliance.version@", stdlibDependentAopallianceVersion)
        newConfig = newConfig.replace("@jcl.slf4j.version@", stdlibDependentJclSlf4jVersion)
        newConfig = newConfig.replace("@commons.io.version@", stdlibDependentCommonsIoVersion)
        newConfig = newConfig.replace("@commons.lang3.version@", stdlibDependentCommonsLang3Version)
        newConfig = newConfig.replace("@data.jsondata.version@", stdlibDataJsonDataVersion)
        newConfig = newConfig.replace("@data.xmldata.version@", stdlibDataXmlDataVersion)
        newConfig = newConfig.replace("@data.csv.version@", stdlibDataCsvVersion)

        ballerinaTomlFile.text = newConfig

        def newPluginConfig = compilerPluginTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        ballerinaCompilerPluginFile.text = newPluginConfig
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            }
        }
    }
}

task populateTestUtilExecutableName() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        testUtilExecutable = "$projectDir/tests/resources/startJava.bat"
    } else {
        testUtilExecutable = "$projectDir/tests/resources/startJava.sh"
    }
}

task startTestUtilAsDaemon(type: com.github.psxpaul.task.ExecFork) {
    executable = testUtilExecutable
    workingDir = "$projectDir"
    standardOutput = new File("$buildDir/tempUtilLogs.log")
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

updateTomlFiles.dependsOn copyStdlibs

tasks.generatePomFileForMavenPublication.dependsOn(startTestUtilAsDaemon)
tasks.copyToLib.dependsOn(startTestUtilAsDaemon)
build.dependsOn "generatePomFileForMavenPublication"
build.dependsOn ":${packageName}-native:build"
build.dependsOn ":${packageName}-compiler-plugin:build"
test.dependsOn ":${packageName}-native:build"
populateTestUtilExecutableName.dependsOn ":${packageName}-test-utils:build"
startTestUtilAsDaemon.dependsOn populateTestUtilExecutableName
test.dependsOn startTestUtilAsDaemon
test.dependsOn ":${packageName}-compiler-plugin:build"

publishToMavenLocal.dependsOn build
publish.dependsOn build
